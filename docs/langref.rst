Templaty Language Reference
===========================

This page explains in detail how the Templaty language is structured.

Regular Text
------------

Regular text is just passed along as-is, without any preprocessing done to it.

Expressions
-----------

Expressions are used in the control-flow statements and can also appear
anywhere in the template to generate specific text. If you want to add an
expression to a piece of text, you have to wrap it between ``{{`` and ``}}``,
like so:

.. code-block:: c

  // Did you know that 25 + 17 equals {{25 + 17}}?

Variable References
^^^^^^^^^^^^^^^^^^^

Any identifier that is not a keyword may be used to reference one of the
built-in expressions or an expression that was defined elsewhere in the
template.

.. code-block:: c

  /* This file was generated on {{now}} by {{author}}. */

Control Flow
------------

The following statements are used in Templaty to change what text is written
when the template is run. Most of them should be very familiar, as they
resemble the constructs found in most regular programming languages.

Conditional Code Generation
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Conditionals are used to generate a piece of text depending on whether a given
predicate is met. Just like in regular programming languages, you can have
conditionals with multiple alternatives or none at all.

.. code-block:: none

  {% if header %}
    // This header is only generated if header is set to true
    // in the environment. You can create a JSON file that contains
    // this variable, or define it somewhere in the template itself.
  {% endif %}

The ``else``-directive is used to provide some text when no predicate matched,
like so:

.. code-block:: none

  {% if long_header %}
    // This file does stuff. It is really cool because it first does 
    // stuff and then some more stuff. Once the stuff is finished, it calls
    // a 'thing' to do other stuff.
  {% else %}
    // This file does stuff.
  {% endif %}

Generating Repititions
^^^^^^^^^^^^^^^^^^^^^^

Templates for code generation wouldn't be particularly useful if we couldn't
use them to auto-generate repetitive code. The ``for``-statement is one of the
simplest methods for generating (possibly huge) amounts of code.

.. code-block:: none

  IDENTITY_MATRIX = [
      {% join i in range(0, 10) with ',' %}
        [{% join j in range(0, 10) with ',' %}{% if j == i %}1{% else %}0{% endjoin %}]
      {% endjoin %}
  ]

Generates the following code:

.. code-block:: python

  IDENTITY_MATRIX = [
      [1,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0],
      [0,0,0,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,1,0,0,0],
      [0,0,0,0,0,0,0,1,0,0],
      [0,0,0,0,0,0,0,0,1,0],
      [0,0,0,0,0,0,0,0,0,1]
  ]

Indentation Control
-------------------

A feature of Templaty that stands out is how it handles indentation and
whitespaces. Because the code generated by Templaty might be read by other
developers, special care must be taken that spaces and newlines are correctly
generated.

The following rules summarise the internal algorithm that is used by Templaty.
If you ever get unexpected results, chances are one of these rules were not 
properly applied.

Rule 1: Code Generated By Statements Is Trimmed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If code was generated without this rule, there would be a lot of newlines
scattered in the generated code, which worsens the readabilty. Luckily,
Templaty is more clever than that and uses some built-in rules to remove
excessive newlines.

.. code-block:: none

  {% if flag %}
    fprintf(stderr, "You are running this program which was generated with 'flag' enabled.");
  {% endif %}
  // No newline between this and the call to fprintf

Generates the following code when we set ``flag`` to ``True``, just like we'd expect:

.. code-block:: c

  fprintf(stderr, "You are running this program which was generated with 'flag' enabled.");
  // No newline between this and the call to fprintf


Rule 2: Leading Indentation of A Statement Block Is Removed
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Consider the following template code for a Python program:

.. code-block:: none

  def main():
      {% if enable_print_foo %}
        foo = get_foo();
        if foo == 2: 
            print("Foo is two!")
        else:
            print("Foo is not two :(")
      {% endif %}


Some users might be surpised to learn that this template generates the
following code:

.. code-block:: python

  def main():
      foo = get_foo()
      if foo == 2:
          print("Foo is two!")
      else:
          print("Foo is not two :(")

However, the rule is actual quite simple. Templaty takes the indentation of the 
leading ``{%`` and applies it to each line that is generated within the block.
In order to make sure there isn't too much indentation, Templaty removes any
indentation that is shared by all the lines inside the statement block.

This rule also works when nesting multiple statements inside each other. For
example:

.. code-block:: none

  POINTS = [
      {% join i in range(0, 10) with ',' %}
          {% if use_random %}
            {{random(0, 10)}}
          {% else %}
            {{i}}
          {% endif %}
      {% endjoin %}
    ]

A call to this program with ``use_random`` set to ``True`` could result in the
following code:

.. code-block:: none

  POINTS = [
      7,
      4,
      9,
      3,
      4,
      8,
      5,
      1,
      1,
      2
  ]

Rule 3: Special Statements Override the Default Intentation Level
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The special statements ``{% indent %}``, ``{% dedent %}`` and ``{% noindent %}``
can be used to modify or override the auto-inferred indentation level.

.. warning:: This feature is currently under development.

.. code-block:: none

  int main() {
    {% noindent %}
      #ifndef FOO
    {% endnoindent %}
    fprintf(stderr, "Warning: FOO was not defined at compile-time.");
    {% noindent %}
      #endif // #ifndef FOO
    {% endnoindent %}
  }

Output:

.. code-block:: none

  int main() {
  #ifndef FOO
    fprintf(stderr, "Warning: FOO was not defined at compile-time.");
  #endif // #ifndef FOO
  }

If you need even more control over the indentation level, you can make use of
the special ``indent()`` function. When called with no arguments, it increases
the indentation with one level for the rest of the file. When called with an
integer, it will set the indentation level to that number.

.. code-block:: none

  if not prompt("Attempt no 1"):
  {% for i in range(2, 3) %}
    {! indent() !}
    if not prompt("Attempt no {{i}}"):
  {% endfor %}
  {! indent(0) !}
  error("I gave up.");

The above snippet will generate the following code:

.. code-block:: python

  if not prompt("Attempt no 1"):
        if not prompt("Attempt no 2"):
            if not prompt("Attempt no 3"):
                error("I gave up.")


Built-in Variables
------------------

Templaty contains a growing number of built-in variables to make it easy for
programmers to write their templates without much hassle. The folllowing is an
incomplete list of functions and variables that are supported out-of-the-box.

``now``
  A variable holding the time the generator started, formatted using some default rules.

``a + b``
  Add two expressions to each other.

``a - b``
  Subtract two expressions from one another.

``a % b``
  Find the remainder after the division of the two given numbers.

